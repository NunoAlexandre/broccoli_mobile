// Generated by Apple Swift version 3.1 (swiftlang-802.0.51 clang-802.0.41)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
@class UIImage;
@class NSCoder;

SWIFT_CLASS("_TtC4Lock10AuthButton")
@interface AuthButton : UIView
@property (nonatomic, strong) UIColor * _Nonnull color;
@property (nonatomic, strong) UIColor * _Nonnull normalColor;
@property (nonatomic, strong) UIColor * _Nonnull highlightedColor;
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIImage * _Nullable icon;
@property (nonatomic, copy) void (^ _Nonnull onPress)(AuthButton * _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


SWIFT_CLASS("_TtC4Lock10HeaderView")
@interface HeaderView : UIView
@property (nonatomic, copy) void (^ _Nonnull onClosePressed)(void);
@property (nonatomic) BOOL showClose;
@property (nonatomic, copy) void (^ _Nonnull onBackPressed)(void);
@property (nonatomic) BOOL showBack;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
@property (nonatomic, strong) UIImage * _Nullable logo;
@property (nonatomic, strong) UIImage * _Nullable maskImage;
@property (nonatomic) BOOL blurred;
@property (nonatomic) UIBlurEffectStyle blurStyle;
@property (nonatomic, strong) UIColor * _Nonnull maskColor;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


@interface HeaderView (SWIFT_EXTENSION(Lock))
@end

@class LockViewController;
@class A0Credentials;
@class UIViewController;
@class NSBundle;
@class NSUserActivity;

/// Lock main class to configure and show the native widget
SWIFT_CLASS("_TtC4Lock4Lock")
@interface Lock : NSObject
@property (nonatomic, readonly, strong) LockViewController * _Nonnull controller;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Creates a new Classic Lock instance loading Auth0 client info from <code>Auth0.plist</code> file in main bundle.
/// The property list file should contain the following sections:
/// <ul>
///   <li>
///     CliendId: your Auth0 client identifier
///   </li>
///   <li>
///     Domain: your Auth0 domain
///   </li>
/// </ul>
///
/// returns:
/// a newly created Lock instance
+ (Lock * _Nonnull)classic SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Lock passwordless instance loading Auth0 client info from <code>Auth0.plist</code> file in main bundle.
/// The property list file should contain the following sections:
/// <ul>
///   <li>
///     CliendId: your Auth0 client identifier
///   </li>
///   <li>
///     Domain: your Auth0 domain
///   </li>
/// </ul>
///
/// returns:
/// a newly created Lock Passwordless instance
+ (Lock * _Nonnull)passwordless SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Lock passwordless instance using clientId and domain
/// \param clientId Auth0 clientId of your application
///
/// \param domain Your Auth0 account domain
///
///
/// returns:
/// a newly created Lock passwordless instance
+ (Lock * _Nonnull)passwordlessWithClientId:(NSString * _Nonnull)clientId domain:(NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Lock classic instance using clientId and domain
/// \param clientId Auth0 clientId of your application
///
/// \param domain Your Auth0 account domain
///
///
/// returns:
/// a newly created Lock classic instance
+ (Lock * _Nonnull)classicWithClientId:(NSString * _Nonnull)clientId domain:(NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
/// Specify what connections should be used by Lock.
/// By default it will use all connections enabled or if an empty list is used
/// \param allowedConnections list of connection names to use
///
///
/// returns:
/// Lock itself for chaining
- (Lock * _Nonnull)allowedConnections:(NSArray<NSString *> * _Nonnull)allowedConnections SWIFT_WARN_UNUSED_RESULT;
/// Register a callback to receive the result of a successful AuthN/AuthZ.
/// \param callback called on successful AuthN/AuthZ
///
///
/// returns:
/// Lock itself for chaining
- (Lock * _Nonnull)onAuthWithCallback:(void (^ _Nonnull)(A0Credentials * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
/// Register a callback to receive Lock unrecoverable errors
/// \param callback called on every unrecoverable error
///
///
/// returns:
/// Lock itself for chaining
- (Lock * _Nonnull)onErrorWithCallback:(void (^ _Nonnull)(NSError * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
/// Register a callback to be notified when the user closes Lock when <code>closable</code> option is <code>true</code>
/// \param callback called when the user closes Lock
///
///
/// returns:
/// Lock itself for chaining
- (Lock * _Nonnull)onCancelWithCallback:(void (^ _Nonnull)(void))callback SWIFT_WARN_UNUSED_RESULT;
/// Register a callback to be notified when a user signs up when login after signup is disabled.
/// The callback will yield the new user email and additional attributes like username.
/// \param callback called when a user signs up with the email and user attributes.
///
///
/// returns:
/// Lock itself for chaining
- (Lock * _Nonnull)onSignUpWithCallback:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
/// Presents Lock from the given controller
/// \param controller controller from where Lock is presented
///
- (void)presentFrom:(UIViewController * _Nonnull)controller;
/// Register a callback to be notified when a user requests passwordless authentication.
/// The callback will yield the user identifier.
/// \param callback called when a user attempts passwordless authentication
///
///
/// returns:
/// Lock itself for chaining
- (Lock * _Nonnull)onPasswordlessWithCallback:(void (^ _Nonnull)(NSString * _Nonnull))callback SWIFT_WARN_UNUSED_RESULT;
/// Lock’s Bundle. Useful for getting bundled resources like images.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
/// Resumes an Auth session from Safari, e.g. when authenticating with Facebook.
/// This method should be called from your <code>AppDelegate</code>
/// \code
/// func application(app: UIApplication, openURL url: NSURL, options: [String : Any]) -> Bool {
///    return Lock.resumeAuth(url, options: options)
/// }
///
///
/// \endcode\param url url of the Auth session received in <code>AppDelegate</code>
///
/// \param options options used to open the app with the given URL
///
///
/// returns:
/// true if the url matched an ongoing Auth session, false otherwise
+ (BOOL)resumeAuth:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Continues an activity from a universal link.
/// This method should be called from your <code>AppDelegate</code>
/// \code
/// func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -> Void) -> Bool {
///    return return Lock.continueAuth(using: userActivity)
/// }
///
///
/// \endcode\param userActivity the NSUserActivity to handle.
///
///
/// returns:
/// true if the link is of the appropriate format, false otherwise
+ (BOOL)continueAuthUsing:(NSUserActivity * _Nonnull)userActivity SWIFT_WARN_UNUSED_RESULT;
@end

@class UITraitCollection;

SWIFT_CLASS("_TtC4Lock18LockViewController")
@interface LockViewController : UIViewController
- (nonnull instancetype)initWithLock:(Lock * _Nonnull)lock OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(Lock))
@end


@interface UIColor (SWIFT_EXTENSION(Lock))
@end

#pragma clang diagnostic pop
